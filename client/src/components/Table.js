import React, { useState, useEffect } from "react";
import axios from "axios";
import TableHeader from "./TableHeader";
import TableRow from "./TableRow";
import Pagination from "./Pagination";

const Table = () => {
  const [data, setData] = useState([]);
  const [perPage, setPerPage] = useState(10);
  const [currentPage, setCurrentPage] = useState(1);
  const [totalPages, setTotalPages] = useState(0);
  const [visiblePages, setVisiblePages] = useState([1, 2, 3, 4, 5, 6]);
  const [count, setCount] = useState(0);

  useEffect(() => {
    const fetchData = async () => {
      try {
        const response = await axios.get(
          `http://localhost:5001/cves?_page=${currentPage}&_limit=${perPage}&_sort=published_date,last_modified_date`
        );
        console.log(response.data);
        setData(response.data.data);
        setCount(response.data.count);
        setTotalPages(response.data.totalPages);
      } catch (error) {
        console.error("Error fetching data:", error);
      }
    };

    fetchData();
  }, [currentPage, perPage]);

  useEffect(() => {
    if (currentPage > 3 && currentPage < totalPages - 2) {
      setVisiblePages([
        currentPage - 2,
        currentPage - 1,
        currentPage,
        currentPage + 1,
        currentPage + 2,
        currentPage + 3,
      ]);
    } else if (currentPage <= 3) {
      setVisiblePages([1, 2, 3, 4, 5, 6]);
    } else {
      setVisiblePages([
        totalPages - 5,
        totalPages - 4,
        totalPages - 3,
        totalPages - 2,
        totalPages - 1,
        totalPages,
      ]);
    }
  }, [currentPage, totalPages]);

  const handleChangePerPage = (newPerPage) => {
    setPerPage(newPerPage);
    setCurrentPage(1);
  };

  const handlePageChange = (newPage) => {
    setCurrentPage(newPage);
  };

  const handlePrevPage = () => {
    setCurrentPage((prevPage) => Math.max(prevPage - 1, 1));
  };

  const handleNextPage = () => {
    setCurrentPage((prevPage) => Math.min(prevPage + 1, totalPages));
  };

  return (
    <div className="flex flex-col items-center mb-10">
      <h1 className="text-2xl font-bold pt-7">CVE LIST</h1>
      <p className="mt-3 text-start mb-2 w-4/5 mr-2 font-bold">
        Total Records: {count}
      </p>
      <div className="flex justify-center items-center">
        <table>
          <TableHeader />
          <tbody>
            {data.map((item) => (
              <TableRow key={item.id} item={item} />
            ))}
          </tbody>
        </table>
      </div>
      <Pagination
        currentPage={currentPage}
        totalPages={totalPages}
        visiblePages={visiblePages}
        handlePageChange={handlePageChange}
        handlePrevPage={handlePrevPage}
        handleNextPage={handleNextPage}
        perPage={perPage}
        count={count}
        handleChangePerPage={handleChangePerPage} 
      />
    </div>
  );
};

export default Table;
