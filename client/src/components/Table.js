import React, { useState, useEffect } from "react";
import axios from "axios";
import formatDate from "./format_date";
import { Link } from "react-router-dom";

const Table = () => {
  const [data, setData] = useState([]);
  const [perPage, setPerPage] = useState(10);
  const [currentPage, setCurrentPage] = useState(1);
  const [totalPages, setTotalPages] = useState(0);
  const [visiblePages, setVisiblePages] = useState([1, 2, 3, 4, 5, 6]);
  const [count, setCount] = useState(0);

  useEffect(() => {
    const fetchData = async () => {
      try {
        const response = await axios.get(
          `http://localhost:5001/cves?_page=${currentPage}&_limit=${perPage}&_sort=published_date,last_modified_date`
        );
        console.log(response.data);
        setData(response.data.data);
        setCount(response.data.count);
        setTotalPages(response.data.totalPages);
      } catch (error) {
        console.error("Error fetching data:", error);
      }
    };

    fetchData();
  }, [currentPage, perPage]);

  useEffect(() => {
    if (currentPage > 3 && currentPage < totalPages - 2) {
      setVisiblePages([
        currentPage - 2,
        currentPage - 1,
        currentPage,
        currentPage + 1,
        currentPage + 2,
        currentPage + 3,
      ]);
    } else if (currentPage <= 3) {
      setVisiblePages([1, 2, 3, 4, 5, 6]);
    } else {
      setVisiblePages([
        totalPages - 5,
        totalPages - 4,
        totalPages - 3,
        totalPages - 2,
        totalPages - 1,
        totalPages,
      ]);
    }
  }, [currentPage, totalPages]);

  const handleChangePerPage = (e) => {
    setPerPage(parseInt(e.target.value));
    setCurrentPage(1);
  };

  const handlePageChange = (newPage) => {
    setCurrentPage(newPage);
  };

  const handlePrevPage = () => {
    setCurrentPage((prevPage) => Math.max(prevPage - 1, 1));
  };

  const handleNextPage = () => {
    setCurrentPage((prevPage) => Math.min(prevPage + 1, totalPages));
  };

  const renderPagination = () => {
    return visiblePages.map((page) => (
      <button
        key={page}
        onClick={() => handlePageChange(page)}
        className={`px-3 py-1 mr-1 rounded ${
          page === currentPage ? "bg-gray-500 text-white" : "bg-gray-300"
        }`}
        style={{ minWidth: "40px" }}
      >
        {page}
      </button>
    ));
  };

  return (
    <div className="flex flex-col items-center mb-10">
      <h1 className="text-2xl font-bold pt-7">CVE LIST</h1>
      <p className="mt-3 text-start mb-2 w-4/5 mr-2 font-bold">
        Total Records: {count}
      </p>
      <div className="flex justify-center items-center">
        <table>
          <thead className="text-md bg-gray-200">
            <tr className="uppercase">
              <th className="px-16 py-3 border-2 border-gray">CVE ID</th>
              <th className="px-16 py-3 border-2 border-gray">identifier</th>
              <th className="px-16 py-3 border-2 border-gray">
                published date
              </th>
              <th className="px-16 py-3 border-2 border-gray">
                last modified date
              </th>
              <th className="px-16 py-3 border-2 border-gray">status</th>
            </tr>
          </thead>
          <tbody>
            {data.map((item) => (
              <tr key={item.id}>
                <td className="px-16 py-3 border-2 border-gray">
                  <Link to={`/${item.cve_id}`}>{item.cve_id}</Link>
                </td>
                <td className="px-16 py-3 border-2 border-gray">
                  <Link to={`/${item.cve_id}`}>{item.identifier}</Link>
                </td>
                <td className="px-16 py-3 border-2 border-gray justify-center">
                  <Link to={`/${item.cve_id}`}>
                    {formatDate(item.published_date)}
                  </Link>
                </td>
                <td className="px-16 py-3 border-2 border-gray justify-center">
                  <Link to={`/${item.cve_id}`}>
                    {formatDate(item.last_modified_date)}
                  </Link>
                </td>
                <td className="px-16 py-3 border-2 border-gray">
                  <Link to={`/${item.cve_id}`}>{item.status}</Link>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
      {/* Pagination controls */}
      <div className="flex flex-row items-center mt-4 w-4/5 text-start justify-between">
        <div className="flex flex-row items-center">
          <label htmlFor="resultsPerPage" className="mr-2 font-bold">
            Results Per Page:
          </label>
          <select
            id="resultsPerPage"
            value={perPage}
            onChange={handleChangePerPage}
            className="px-2 py-1 border border-black rounded font-bold"
          >
            <option value="10">10</option>
            <option value="50">50</option>
            <option value="100">100</option>
          </select>
        </div>
        <div className="flex flex-row items-center">
          <p className="font-bold mr-4">
            {perPage * currentPage - perPage + 1} to{" "}
            {Math.min(perPage * currentPage, count)} of {count} records
          </p>
          <div className="flex flex-row">
            <button
              onClick={handlePrevPage}
              className={`px-3 py-1 mr-1 rounded ${
                currentPage === 1 ? "bg-gray-300" : "bg-gray-500 text-white"
              }`}
              disabled={currentPage === 1}
            >
              {"\u003C"}
            </button>
            {renderPagination()}
            <button
              onClick={handleNextPage}
              className={`px-3 py-1 rounded ${
                currentPage === totalPages
                  ? "bg-gray-300"
                  : "bg-gray-500 text-white"
              }`}
              disabled={currentPage === totalPages}
            >
              {"\u003E"}
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Table;
