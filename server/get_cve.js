import express from 'express';
import bodyParser from 'body-parser';
import mongoose from 'mongoose';
import dataSchema from './schema.js';

const app=express();
app.use(bodyParser.json());

// MongoDB connection URL
const mongoUrl = 'mongodb+srv://felixjoseph2003:4AEn1urJ20hJghib@cluster0.vv9skqg.mongodb.net/';

const Data = mongoose.model('cves',dataSchema);

// Connect to MongoDB
mongoose.connect(mongoUrl)
    .then(() => {
        console.log('Connected to MongoDB');
    })
    .catch(error => {
        console.error('Error connecting to MongoDB:', error);
        process.exit(1);
    });

// route to fetch all data
app.get('/cves', async (req, res) => {
  const page = parseInt(req.query._page) || 1;
  const limit = parseInt(req.query._limit) || 10;
  

  try {
      const totalItems = await Data.countDocuments();
      const count=await Data.countDocuments();
      const totalPages = Math.ceil(totalItems / limit);

      const startIndex = (page - 1) * limit;
      const endIndex = page * limit;

      let results = {};

      if (endIndex < totalItems) {
          results.next = {
              page: page + 1,
              limit: limit
          };
      }

      if (startIndex > 0) {
          results.previous = {
              page: page - 1,
              limit: limit
          };
      }
      results.count=count;
      results.totalPages = totalPages;

      results.data = await Data.find().skip(startIndex).limit(limit);

      res.json(results);
  } catch (err) {
      console.error('Error fetching CVE details:', err);
      res.status(500).json({ error: 'Internal Server Error' });
  }
});

// route to fetch data using cve id
app.get('/cves/:cveId', async (req, res) => {
    const cveId = req.params.cveId;
    try {
      const cveDetails = await Data.findOne({ cve_id: cveId });
      res.json(cveDetails);
    } catch (err) {
      console.error('Error fetching CVE details by CVEID:', err);
      res.status(500).json({ error: 'Internal Server Error' });
    }
  });
  
  // Route to get CVE details by year
  app.get('/cve_data/cves/year/:year', async (req, res) => {
    const year = req.params.year;
    try {
      const cveDetails = await Data.find({ published_date: { $gte: new Date(`${year}-01-01`), $lt: new Date(`${year}-12-31`) } });
      res.json(cveDetails);
    } catch (err) {
      console.error('Error fetching CVE details by year:', err);
      res.status(500).json({ error: 'Internal Server Error' });
    }
  });
  
  // Route to get CVE details by CVSS score
  app.get('/cve_data/cves/score/:score', async (req, res) => {
    const score = req.params.score;
    try {
      const cveDetails = await Data.find({
        $or: [
          { 'metrics.cvssMetricV2.cvssData.baseScore': score },
          { 'metrics.cvssMetricV3.cvssData.baseScore': score }
        ]
      });
      res.json(cveDetails);
    } catch (err) {
      console.error('Error fetching CVE details by score:', err);
      res.status(500).json({ error: 'Internal Server Error' });
    }
  });
  
  // Route to get CVE details by last modified date in N days
  app.get('/cve_data/cves/modified/:days', async (req, res) => {
    const days = req.params.days;
    const currentDate = new Date();
    const modifiedDate = new Date(currentDate.setDate(currentDate.getDate() - days));
    try {
      const cveDetails = await Data.find({ last_modified_date: { $gte: modifiedDate } });
      res.json(cveDetails);
    } catch (err) {
      console.error('Error fetching CVE details by modified date:', err);
      res.status(500).json({ error: 'Internal Server Error' });
    }
  });
  
  // Start the server
  const PORT = 5001;
  app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
  });