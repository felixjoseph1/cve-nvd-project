import axios from 'axios';
import mongoose from 'mongoose';
import schedule from 'node-schedule';
import dataSchema from './schema.js';

const apiUrl = 'https://services.nvd.nist.gov/rest/json/cves/2.0';
const mongoUrl = 'mongodb+srv://felixjoseph2003:4AEn1urJ20hJghib@cluster0.vv9skqg.mongodb.net/';

const Data = mongoose.model('cves', dataSchema);

async function connectToMongoDB() {
    try {
        await mongoose.connect(mongoUrl);
        console.log('Connected to MongoDB');
    } catch (error) {
        console.error('Error connecting to MongoDB:', error);
        throw error;
    }
}

async function disconnectFromMongoDB() {
    try {
        await mongoose.disconnect();
        console.log('Disconnected from MongoDB');
    } catch (error) {
        console.error('Error disconnecting from MongoDB:', error);
        throw error;
    }
}

async function fetchData() {
    try {
        const response = await axios.get(apiUrl);
        const vulnerabilities = response.data.vulnerabilities;
        return vulnerabilities.map(vuln => ({
            cve_id: vuln.cve.id,
            identifier: vuln.cve.sourceIdentifier,
            published_date: new Date(vuln.cve.published),
            last_modified_date: new Date(vuln.cve.lastModified),
            status: vuln.cve.vulnStatus,
            description: vuln.cve.descriptions[0].value,
            metrics: vuln.cve.metrics,
            configurations: vuln.cve.configurations
        }));
    } catch (error) {
        console.error('Error fetching data:', error);
        throw error;
    }
}

async function insertDataIntoMongoDB(data) {
    try {
        let new_data = 0;
        for (const item of data) {
            const existingData = await Data.findOne({ cve_id: item.cve_id });
            if (!existingData) {
                await Data.create(item);
                console.log('New data inserted into MongoDB');
                new_data = 1;
            }
        }
        if (new_data === 0) {
            console.log('No new data to insert');
        }
    } catch (error) {
        console.error('Error inserting data into MongoDB:', error);
        throw error;
    }
}

async function main() {
    try {
        await connectToMongoDB();
        const data = await fetchData();
        await insertDataIntoMongoDB(data);
    } catch (error) {
        console.error('Main function error:', error);
    } finally {
        await disconnectFromMongoDB();
    }
}

main();

schedule.scheduleJob('0 */6 * * *', function() {
    console.log('Scheduled data synchronization started...');
    main();
});
